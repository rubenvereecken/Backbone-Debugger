// Generated by CoffeeScript 1.7.1
(function() {
  var BackboneAgent,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  BackboneAgent = (function() {
    var debug, hiddenPropertyPrefix, lastAppComponentsIndex;

    function BackboneAgent() {
      this.onBackboneDetected = __bind(this.onBackboneDetected, this);
      this.patchBackboneRouter = __bind(this.patchBackboneRouter, this);
      this.patchBackboneCollection = __bind(this.patchBackboneCollection, this);
      this.patchBackboneModel = __bind(this.patchBackboneModel, this);
      this.patchBackboneView = __bind(this.patchBackboneView, this);
      this.patchAppComponentSync = __bind(this.patchAppComponentSync, this);
      this.patchAppComponentEvents = __bind(this.patchAppComponentEvents, this);
      this.patchAppComponentTrigger = __bind(this.patchAppComponentTrigger, this);
      this.addAppComponentAction = __bind(this.addAppComponentAction, this);
      this.monitorAppComponentProperty = __bind(this.monitorAppComponentProperty, this);
      this.registerAppComponent = __bind(this.registerAppComponent, this);
      this.setAppComponentInfo = __bind(this.setAppComponentInfo, this);
      this.patchBackboneComponent = __bind(this.patchBackboneComponent, this);
      this.setHiddenProperty = __bind(this.setHiddenProperty, this);
      this.getHiddenProperty = __bind(this.getHiddenProperty, this);
      this.patchFunctionLater = __bind(this.patchFunctionLater, this);
      this.patchFunction = __bind(this.patchFunction, this);
      this.clone = __bind(this.clone, this);
      console.debug("Backbone agent is starting...");
      this.onBackboneDetected(function(Backbone) {
        console.debug("Backbone detected: ", Backbone);
        this.onceDefined(Backbone, "View", this.patchBackboneView);
        this.onceDefined(Backbone, "Model", this.patchBackboneModel);
        this.onceDefined(Backbone, "Collection", this.patchBackboneCollection);
        return this.onceDefined(Backbone, "Router", this.patchBackboneRouter);
      });
    }

    debug = {
      active: false,
      log: function() {
        if (!this.active) {
          return;
        }
        return console.log.apply(console, arguments);
      }
    };

    BackboneAgent.prototype.isObject = function(target) {
      return typeof target === "object" && target !== null;
    };

    BackboneAgent.prototype.isArray = function(object) {
      return Object.prototype.toString.call(object) === "[object Array]";
    };

    BackboneAgent.prototype.clone = function(object) {
      var newObject, prop;
      if (!this.isObject(object)) {
        return object;
      }
      if (isArray(object)) {
        return object.slice();
      }
      newObject = {};
      for (prop in object) {
        newObject[prop] = object[prop];
      }
      return newObject;
    };

    BackboneAgent.prototype.watchOnce = function(object, property, callback) {
      var onceHandler;
      return watch(object, property, onceHandler = function(prop, action, newValue, oldValue) {
        unwatch(object, property, onceHandler);
        return callback(prop, action, newValue, oldValue);
      });
    };

    BackboneAgent.prototype.onSetted = function(object, property, callback) {
      watch(object, property, (function(prop, action, newValue, oldValue) {
        if (action === "set") {
          callback(newValue);
        }
      }), 0);
    };

    BackboneAgent.prototype.onceSetted = function(object, property, callback) {
      watchOnce(object, property, (function(prop, action, newValue, oldValue) {
        if (action === "set") {
          callback(newValue);
        }
      }), 0);
    };

    BackboneAgent.prototype.onSettedDeep = function(object, property, onChange, recursionLevel) {
      watch(object, property, (function(prop, action, change, oldValue) {
        if (action === "set" || action === "differentattr") {
          onChange();
        }
      }), recursionLevel, true);
    };

    BackboneAgent.prototype.onDefined = function(object, property, callback) {
      if (object[property] !== undefined) {
        callback(object[property]);
      }
      return this.onSetted(object, property, function(newValue) {
        if (newValue !== undefined) {
          return callback(newValue);
        }
      });
    };

    BackboneAgent.prototype.onceDefined = function(object, property, callback) {
      var handler;
      if (object[property] == null) {
        callback(object[property]);
      }
      return watch(object, property, handler = function(prop, action, newValue, oldValue) {
        if (newValue !== undefined) {
          unwatch(object, property, handler);
          return callback(newValue);
        }
      });
    };

    BackboneAgent.prototype.patchFunction = function(object, functionName, patcher) {
      var emptyFunction, originalFunction;
      originalFunction = object[functionName];
      object[functionName] = patcher(originalFunction);
      emptyFunction = function() {};
      return object[functionName].toString = function() {
        if (originalFunction) {
          return originalFunction.toString.apply(originalFunction, arguments);
        } else {
          return emptyFunction.toString.apply(emptyFunction, arguments);
        }
      };
    };

    BackboneAgent.prototype.patchFunctionLater = function(object, functionName, patcher) {
      if (object[functionName] == null) {
        return this.onceDefined(object, functionName, (function(_this) {
          return function() {
            return _this.patchFunction(object, functionName, patcher);
          };
        })(this));
      } else {
        return this.patchFunction(object, functionName, patcher);
      }
    };

    BackboneAgent.prototype.AppComponentAction = function(type, name, data, dataKind) {
      this.timestamp = new Date().getTime();
      this.type = type;
      this.name = name;
      this.data = data;
      this.dataKind = dataKind;
      this.printDetailsInConsole = function() {};
    };

    BackboneAgent.prototype.AppComponentInfo = function(category, index, component, actions) {
      this.category = category;
      this.index = index;
      this.component = component;
      this.actions = actions || [];
    };

    lastAppComponentsIndex = {
      View: -1,
      Model: -1,
      Collection: -1,
      Router: -1
    };

    BackboneAgent.appComponentsInfo = {
      View: [],
      Model: [],
      Collection: [],
      Router: []
    };

    BackboneAgent.getAppComponentsIndexes = function(appComponentCategory) {
      var appComponentIndex, appComponentsIndexes, appComponentsInfo;
      appComponentsInfo = BackboneAgent.appComponentsInfo[appComponentCategory];
      appComponentsIndexes = [];
      for (appComponentIndex in appComponentsInfo) {
        if (appComponentsInfo.hasOwnProperty(appComponentIndex)) {
          appComponentsIndexes.push(appComponentIndex);
        }
      }
      return appComponentsIndexes;
    };

    BackboneAgent.getAppComponentInfo = function(appComponent) {
      return BackboneAgent.getHiddenProperty(appComponent, "appComponentInfo");
    };

    BackboneAgent.getAppComponentInfoByIndex = function(appComponentCategory, appComponentIndex) {
      var appComponentInfo;
      appComponentInfo = BackboneAgent.appComponentsInfo[appComponentCategory][appComponentIndex];
      return appComponentInfo;
    };

    BackboneAgent.getAppViewInfoFromElement = function(pageElement) {
      var candidateView, candidateViewInfo, currentView, currentViewInfo, i, isAscendant, isBetterCandidate, l, viewsIndexes;
      isAscendant = function(target, of_) {
        var ofParent;
        if (!of_) {
          return false;
        }
        ofParent = of_.parentNode;
        if (target === ofParent) {
          return true;
        }
        return isAscendant(target, ofParent);
      };
      candidateViewInfo = void 0;
      viewsIndexes = BackboneAgent.getAppComponentsIndexes("View");
      i = 0;
      l = viewsIndexes.length;
      while (i < l) {
        currentViewInfo = BackboneAgent.getAppComponentInfoByIndex("View", viewsIndexes[i]);
        currentView = currentViewInfo.component;
        if (currentView.el === pageElement) {
          candidateViewInfo = currentViewInfo;
          break;
        }
        candidateView = (candidateViewInfo ? candidateViewInfo.component : undefined);
        isBetterCandidate = isAscendant(currentView.el, pageElement) && (!candidateView || isAscendant(candidateView.el, currentView.el));
        if (isBetterCandidate) {
          candidateViewInfo = currentViewInfo;
        }
        i++;
      }
      return candidateViewInfo;
    };

    hiddenPropertyPrefix = "__backboneDebugger__";

    BackboneAgent.prototype.getHiddenProperty = function(object, property) {
      if (!this.isObject(object)) {
        return;
      }
      return object[this.hiddenPropertyPrefix + property];
    };

    BackboneAgent.prototype.setHiddenProperty = function(object, property, value) {
      if (!this.isObject(object)) {
        return;
      }
      object[this.hiddenPropertyPrefix + property] = value;
    };

    BackboneAgent.prototype.patchBackboneComponent = function(BackboneComponent, instancePatcher) {
      return this.onceDefined(BackboneComponent, "extend", (function(_this) {
        return function() {
          var patchInitialize;
          patchInitialize = function(originalInitialize) {
            return function() {
              var isInstancePatched;
              isInstancePatched = _this.getHiddenProperty(_this, "isInstancePatched");
              if (!isInstancePatched) {
                instancePatcher(_this);
                _this.setHiddenProperty(_this, "isInstancePatched", true);
              }
              if (typeof originalInitialize === "function") {
                return originalInitialize.apply(_this, arguments);
              }
            };
          };
          _this.setHiddenProperty(BackboneComponent.prototype, "patchedInitialize", patchInitialize(BackboneComponent.prototype.initialize));
          return Object.defineProperty(BackboneComponent.prototype, "initialize", {
            configurable: true,
            enumerable: true,
            get: function() {
              var patchedInitialize;
              patchedInitialize = _this.getHiddenProperty(_this, "patchedInitialize");
              return patchedInitialize;
            },
            set: function(newInitialize) {
              return _this.setHiddenProperty(_this, "patchedInitialize", _this.patchInitialize(newInitialize));
            }
          });
        };
      })(this));
    };

    BackboneAgent.prototype.setAppComponentInfo = function(appComponent, appComponentInfo) {
      var appComponentCategory, appComponentIndex;
      appComponentCategory = appComponentInfo.category;
      appComponentIndex = appComponentInfo.index;
      this.setHiddenProperty(appComponent, "appComponentInfo", appComponentInfo);
      return this.appComponentsInfo[appComponentCategory][appComponentIndex] = appComponentInfo;
    };

    BackboneAgent.prototype.sendMessage = function(message) {
      message.target = "page";
      window.postMessage(message, "*");
    };

    BackboneAgent.prototype.sendAppComponentReport = function(name, report) {
      report.timestamp = new Date().getTime();
    };

    BackboneAgent.prototype.registerAppComponent = function(appComponentCategory, appComponent) {
      var appComponentIndex, appComponentInfo;
      appComponentIndex = ++lastAppComponentsIndex[appComponentCategory];
      appComponentInfo = new AppComponentInfo(appComponentCategory, appComponentIndex, appComponent);
      this.setAppComponentInfo(appComponent, appComponentInfo);
      this.sendAppComponentReport(appComponentCategory + ":new", {
        componentIndex: appComponentIndex
      });
      console.debug("New " + appComponentCategory, appComponent);
      return appComponentIndex;
    };

    BackboneAgent.prototype.monitorAppComponentProperty = function(appComponent, property, recursionLevel) {
      var monitorFragmen, propertyChanged;
      propertyChanged = (function(_this) {
        return function() {
          var appComponentInfo;
          appComponentInfo = _this.getAppComponentInfo(appComponent);
          return _this.sendAppComponentReport(appComponentInfo.category + ":" + appComponentInfo.index + ":change", {
            componentProperty: property
          });
        };
      })(this);
      monitorFragmen = (function(_this) {
        return function(object, propertyFragments, index) {
          var currentProperty, currentRecursionLevel, onFragmentChange;
          currentProperty = propertyFragments[index];
          currentRecursionLevel = (index === propertyFragments.length - 1 ? recursionLevel : 0);
          onFragmentChange = function() {
            if (index === propertyFragments.length - 1) {
              propertyChanged();
            } else {
              if (_this.isObject(object[currentProperty])) {
                monitorFragment(object[currentProperty], propertyFragments, index + 1);
              }
            }
          };
          if (object[currentProperty] !== undefined) {
            onFragmentChange();
          }
          onSettedDeep(object, currentProperty, onFragmentChange, recursionLevel);
        };
      })(this);
      return monitorFragment(appComponent, property.split("."), 0);
    };

    BackboneAgent.prototype.addAppComponentAction = function(appComponent, appComponentAction) {
      var actionIndex, appComponentInfo;
      appComponentInfo = this.getAppComponentInfo(appComponent);
      appComponentInfo.actions.push(appComponentAction);
      actionIndex = appComponentInfo.actions.length - 1;
      this.sendAppComponentReport(appComponentInfo.category + ":" + appComponentInfo.index + ":action", {
        componentActionIndex: actionIndex
      });
      return actionIndex;
    };

    BackboneAgent.prototype.patchAppComponentTrigger = function(appComponent) {
      return patchFunctionLater(appComponent, "trigger", (function(_this) {
        return function(originalFunction) {
          return function() {
            var data, dataKind, eventArguments, eventName, result;
            result = originalFunction.apply(_this, arguments);
            eventName = arguments[0];
            eventArguments = undefined;
            if (arguments.length > 1) {
              eventArguments = Array.prototype.slice.call(arguments, 1);
            }
            data = eventArguments;
            dataKind = (data === undefined ? undefined : "event arguments");
            _this.addAppComponentAction(_this, new AppComponentAction("Trigger", eventName, data, dataKind));
            return result;
          };
        };
      })(this));
    };

    BackboneAgent.prototype.patchAppComponentEvents = function(appComponent) {};

    BackboneAgent.prototype.patchAppComponentSync = function(appComponent) {
      return this.patchFunctionLater(appComponent, "sync", (function(_this) {
        return function(originalFunction) {
          return function() {
            var argumentsArray, method, result, syncCompleted;
            method = arguments[0];
            syncCompleted = function(isSuccess) {
              var actionName, syncStatus;
              syncStatus = (isSuccess ? "success" : "failure");
              actionName = method + " (" + syncStatus + ")";
              addAppComponentAction(appComponent, new AppComponentAction("Sync", actionName));
            };
            argumentsArray = Array.prototype.slice.call(arguments);
            if (argumentsArray[2] === undefined) {
              argumentsArray[2] = {};
            }
            _this.patchFunction(argumentsArray[2], "success", function(originalFunction) {
              return function() {
                syncCompleted(true);
                if (originalFunction) {
                  return originalFunction.apply(_this, arguments);
                }
              };
            });
            _this.patchFunction(argumentsArray[2], "failure", function(originalFunction) {
              return function() {
                syncCompleted(false);
                if (originalFunction) {
                  return originalFunction.apply(_this, arguments);
                }
              };
            });
            result = originalFunction.apply(_this, argumentsArray);
            return result;
          };
        };
      })(this));
    };

    BackboneAgent.prototype.patchBackboneView = function(BackboneView) {
      console.debug("Backbone.View detected");
      return this.patchBackboneComponent(BackboneView, (function(_this) {
        return function(view) {
          var viewIndex;
          viewIndex = _this.registerAppComponent("View", view);
          _this.monitorAppComponentProperty(view, "model", 0);
          _this.monitorAppComponentProperty(view, "collection", 0);
          _this.monitorAppComponentProperty(view, "el.tagName", 0);
          _this.monitorAppComponentProperty(view, "el.id", 0);
          _this.monitorAppComponentProperty(view, "el.className", 0);
          _this.patchAppComponentTrigger(view);
          _this.patchAppComponentEvents(view);
          _this.patchFunctionLater(view, "delegateEvents", function(originalFunction) {
            return function() {
              var argumentsArray, callback, eventType, events, result;
              events = arguments[0];
              if (events === undefined) {
                events = (typeof _this.events === "function" ? _this.events() : _this.events);
              }
              events = _this.clone(events);
              for (eventType in events) {
                if (events.hasOwnProperty(eventType)) {
                  callback = events[eventType];
                  if (typeof callback !== "function") {
                    callback = _this[callback];
                  }
                  if (!callback) {
                    continue;
                  }
                  events[eventType] = (function(eventType, callback) {
                    return function(event) {
                      var result;
                      _this.addAppComponentAction(view, new AppComponentAction("Page event handling", eventType, event, "jQuery Event"));
                      result = callback.apply(_this, arguments);
                      return result;
                    };
                  })(eventType, callback);
                }
              }
              argumentsArray = Array.prototype.slice.call(arguments);
              argumentsArray[0] = events;
              result = originalFunction.apply(_this, argumentsArray);
              return result;
            };
          });
          patchFunctionLater(view, "render", function(originalFunction) {
            return function() {
              var result;
              result = originalFunction.apply(_this, arguments);
              _this.addAppComponentAction(_this, new AppComponentAction("Operation", "render"));
              return result;
            };
          });
          return patchFunctionLater(view, "remove", function(originalFunction) {
            return function() {
              var result;
              result = originalFunction.apply(_this, arguments);
              _this.addAppComponentAction(_this, new AppComponentAction("Operation", "remove"));
              return result;
            };
          });
        };
      })(this));
    };

    BackboneAgent.prototype.patchBackboneModel = function(BackboneModel) {
      console.debug("Backbone.Model detected");
      return this.patchBackboneComponent(BackboneModel, (function(_this) {
        return function(model) {
          var modelIndex;
          modelIndex = registerAppComponent("Model", model);
          _this.monitorAppComponentProperty(model, "attributes", 1);
          _this.monitorAppComponentProperty(model, "id", 0);
          _this.monitorAppComponentProperty(model, "cid", 0);
          _this.monitorAppComponentProperty(model, "urlRoot", 0);
          _this.monitorAppComponentProperty(model, "collection", 0);
          _this.patchAppComponentTrigger(model);
          _this.patchAppComponentEvents(model);
          return _this.patchAppComponentSync(model);
        };
      })(this));
    };

    BackboneAgent.prototype.patchBackboneCollection = function(BackboneCollection) {
      console.debug("Backbone.Collection detected");
      return this.patchBackboneComponent(BackboneCollection, (function(_this) {
        return function(collection) {
          var collectionIndex;
          collectionIndex = _this.registerAppComponent("Collection", collection);
          _this.monitorAppComponentProperty(collection, "model", 0);
          _this.monitorAppComponentProperty(collection, "models", 1);
          _this.monitorAppComponentProperty(collection, "url", 0);
          _this.patchAppComponentTrigger(collection);
          _this.patchAppComponentEvents(collection);
          return _this.patchAppComponentSync(collection);
        };
      })(this));
    };

    BackboneAgent.prototype.patchBackboneRouter = function(BackboneRouter) {
      console.debug("Backbone.Router detected");
      return this.patchBackboneComponent(BackboneRouter, (function(_this) {
        return function(router) {
          var routerIndex;
          routerIndex = registerAppComponent("Router", router);
          _this.patchAppComponentTrigger(router);
          return _this.patchAppComponentEvents(router);
        };
      })(this));
    };

    BackboneAgent.prototype.onBackboneDetected = function(callback) {
      var handleBackbone;
      handleBackbone = (function(_this) {
        return function(Backbone) {
          if (_this.getHiddenProperty(Backbone, "isDetected")) {
            return;
          }
          _this.setHiddenProperty(Backbone, "isDetected", true);
          return callback(Backbone);
        };
      })(this);
      this.onSetted(window, "Backbone", handleBackbone);
      return this.patchFunctionLater(window, "define", (function(_this) {
        return function(originalFunction) {
          return function() {
            var argumentsArray, i, l;
            argumentsArray = Array.prototype.slice.call(arguments);
            i = 0;
            l = argumentsArray.length;
            while (i < l) {
              if (typeof argumentsArray[i] === "function") {
                _this.patchFunction(argumentsArray, i, function(originalFunction) {
                  return function(require, exports, modules) {
                    var BackboneCandidate, isBackbone, module;
                    module = originalFunction.apply(_this, arguments);
                    BackboneCandidate = module || _this;
                    isBackbone = _this.isObject(BackboneCandidate) && typeof BackboneCandidate.View === "function" && typeof BackboneCandidate.Model === "function" && typeof BackboneCandidate.Collection === "function" && typeof BackboneCandidate.Router === "function";
                    if (isBackbone) {
                      _this.handleBackbone(BackboneCandidate);
                    }
                    return module;
                  };
                });
                break;
              }
              i++;
            }
            return originalFunction.apply(_this, argumentsArray);
          };
        };
      })(this));
    };

    return BackboneAgent;

  })();

  window.__backboneAgent = new BackboneAgent();

}).call(this);
